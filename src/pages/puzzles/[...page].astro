---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import type {
  InferGetStaticParamsType,
  InferGetStaticPropsType,
  GetStaticPaths,
} from "astro";
import Pagination from "../../components/Pagination.astro";
import PuzzlePreview from "../../components/PuzzlePreview.astro";
import { SITE_PAGE_SIZE } from "../../consts";

export const getStaticPaths = (async ({ paginate }) => {
  const puzzles = (await getCollection("puzzle")).sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
  );

  return paginate(puzzles, { pageSize: SITE_PAGE_SIZE });
}) satisfies GetStaticPaths;
type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;
// All paginated data is passed on the "page" prop
const { page } = Astro.props;

const pathname = new URL(Astro.request.url).pathname.split("/");
const basePath = pathname[1];
---

<BaseLayout title={`Puzzles | Page ${page.currentPage}`}>
  <section>
    <!--Display the current page number. Astro.params.page can also be used!-->
    <ul>
      {
        page.data.map((puzzle) => (
          <li>
            <PuzzlePreview {...puzzle} />
          </li>
        ))
      }
    </ul>
  </section>
  {
    page.lastPage > 1 && (
      <Pagination
        length={page.lastPage}
        currentUrl={page.url.current}
        currentPage={page.currentPage}
        baseUrl={`/${basePath}`}
        prevUrl={page.url.prev}
        nextUrl={page.url.next}
        lastUrl={`/${basePath}/${page.lastPage}`}
      />
    )
  }
</BaseLayout>

<style>
  ul {
    list-style: none;
  }
</style>
