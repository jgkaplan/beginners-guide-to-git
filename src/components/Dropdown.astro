---
const { label, ...props } = Astro.props;
---

<dropdown-entry {label} {...props}>
  <button>Show {label}</button>
  <div class="dropdown-content">
    <slot />
  </div>
</dropdown-entry>

<style>
  dropdown-entry {
    display: inline-block;
    width: 100%;
    margin-bottom: 10px;
  }

  button {
    background-color: #eee;
    color: #444;
    cursor: pointer;
    padding: 18px;
    width: 100%;
    border: none;
    text-align: left;
    outline: none;
    font-size: 15px;
  }
  button:hover {
    background-color: #ccc;
  }
  div {
    padding: 0 18px;
    background-color: whitesmoke;
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-in-out;
  }
</style>

<script>
  // Define the behaviour for our new type of HTML element.
  class DropdownEntry extends HTMLElement {
    constructor() {
      super();
      let visible = false;

      const button = this.querySelector("button");
      const content = this.querySelector("div");

      // Each time the button is clicked, update the count.
      button?.addEventListener("click", () => {
        visible = !visible;
        if (visible) {
          button.textContent = `Hide ${this.label}`;
          content!.style.maxHeight = content!.scrollHeight + "px";
        } else {
          button.textContent = `Show ${this.label}`;
          content!.style.maxHeight = "";
        }
      });
    }
    get label() {
      return this.getAttribute("label") || "Dropdown";
    }

    set label(val) {
      this.setAttribute("label", val);
    }
    static get observedAttributes() {
      return ["label"];
    }
  }

  customElements.define("dropdown-entry", DropdownEntry);
</script>
